; generated by drom from package skeleton 'library'

(library
  (name cobol_preproc)
  (public_name cobol_preproc)
  (wrapped true)
  ; use field 'dune-libraries' to add libraries without opam deps
  (libraries ppx_import ppx_deriving menhirLib cobol_data cobol_config cobol_common str)
  ; use field 'dune-flags' to set this value
  (flags (:standard))
  ; use field 'dune-stanzas' to add more stanzas here
  (preprocess (staged_pps ppx_import ppx_deriving.show))
  
  )

(ocamllex src_lexer)

(rule
    (targets version.ml)
    (deps (:script version.mlt) package.toml)
    (action (with-stdout-to %{targets} (run %{ocaml} unix.cma %{script}))))

(documentation
  (package cobol_preproc))

; use field 'dune-trailer' to add more stuff here
(menhir (modules grammar_common compdir_grammar)
        (merge_into compdir_grammar)
        (flags --cmly --table))

(rule
  (targets compdir_keywords.ml)
  (enabled_if (<> %{profile} "release"))
  (deps    compdir_grammar.cmly)
  (mode    promote)
  (action
    (with-stdout-to %{targets}
       (run %{exe:../cobol_parser/keywords/gen_keywords.exe} %{deps}))))

(menhir (modules preproc_tokens grammar_common preproc_grammar)
        (merge_into preproc_grammar)
        (flags --cmly --table
               --external-tokens Preproc_tokens))

(menhir (modules preproc_tokens)
        (flags --only-tokens))

(rule
  (targets preproc_keywords.ml)
  (enabled_if (<> %{profile} "release"))
  (deps    preproc_grammar.cmly)
  (mode    promote)
  (action
    (with-stdout-to %{targets}
       (run %{exe:../cobol_parser/keywords/gen_keywords.exe} %{deps}
            --external-tokens Preproc_tokens))))

